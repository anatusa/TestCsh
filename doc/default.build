<!--
    Together Fuzzy Search
    Copyright (C) 2011 Together Teamsolutions Co., Ltd.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or 
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program. If not, see http://www.gnu.org/licenses
-->
<project name="DocBook" default="buildDocBook" basedir=".">

	<!-- ==================================================================== -->
	<!-- Init target                                                          -->
	<!-- ==================================================================== -->
	<target name="init">
		
		<!--Set the global variables-->
		<property name="docbook.name" value="${app.name}-doc" />
		<property name="doc.dir" value="." />
		<property name="tmp.dir" value="${doc.dir}/tmp" />
		<property name="doc.title" value="${app.full.name}" />
		<property name="build.debug" value="off" />
		<property name="build.optimize" value="on" />
		<property name="project.name" value="${string::to-upper(app.name)}" />
		<property name="rebranding" value="false" />

		<!-- Set the directories-->
		<property name="ext.lib.dir" value="${doc.dir}/../lib" />

		<!-- Set directories -->
		<property name="project.dir" value="${doc.dir}/../" />
		<property name="output.dir" value="${project.dir}/output/doc" />
		<property name="build.dir" value="${output.dir}/${app.name}-${version}-${release}" />
		<property name="output.lib.dir" value="${build.dir}/lib" />
		<property name="output.doc.dir" value="${project.dir}/output/doc" />
		
		<property name="tools.dir" value="${project::get-base-directory()}/../tools" />
		
		<!-- XSL setting -->
		<property name="xsl.htmlhelp" value="${tools.dir}/docbook-xsl/xsl/htmlhelp/htmlhelp.xsl" />
		<property name="xsl.html" value="${tools.dir}/docbook-xsl/xsl/html/docbook.xsl" />
		<property name="xsl.chunk" value="${tools.dir}/docbook-xsl/xsl/html/chunk.xsl" />
		<property name="xsl.fo" value="${tools.dir}/docbook-xsl-fo/docbookx.xsl" />
		
		<property name="doc.xml" value="${docbook.name}.xml" />
		<property name="doc.fo" value="${docbook.name}.fo" />
		
		<!-- HTML Help Workshop -->
		<choose>
			<when  test="${(not property::exists('htmlhelp.dir')) or htmlhelp.dir==''}">
				<property name="hhc.exe" value="${tools.dir}\htmlhelpworkshop\hhc.exe" />
				<property name="hhc.dir" value="${tools.dir}\htmlhelpworkshop" />				
			</when>
			<otherwise>
				<property name="hhc.exe" value="${htmlhelp.dir}\hhc.exe" />
				<property name="hhc.dir" value="${htmlhelp.dir}" />
			</otherwise>
		</choose>
		
		<property name="doc.current.xml" value="" />
		<property name="doc.current.xsl" value="" />
		<property name="doc.current.html" value="" />
		<property name="doc.current.fo" value="" />
		<property name="doc.current.pdf" value="" />
		
		<!-- NAnt Contrib setting -->
		<!-- <loadtasks assembly="${path::combine(environment::get-variable('NANTCONTRIB_DIR'), 'bin/NAnt.Contrib.Tasks.dll')}" /> -->
	</target>

	<!-- ==================================================================== -->
	<!-- Prepare output                                                       -->
	<!-- ==================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${output.dir}" />
		<mkdir dir="${tmp.dir}" />
		<mkdir dir="${tmp.dir}/images" />
		<mkdir dir="${tmp.dir}/docbook" />
	</target>

	<!-- ==================================================================== -->
	<!-- Content output                                                       -->
	<!-- ==================================================================== -->
	<target name="content" depends="prepare">
		<copy todir="${tmp.dir}/images">
			<fileset basedir="${doc.dir}/images">
				<include name="**"/>
			</fileset>
		</copy>
		
		<copy todir="${tmp.dir}/images/templates">
			<fileset basedir="${tools.dir}/tds">
				<include name="**/*" />
			</fileset>
		</copy>
		
		<copy file="${tools.dir}/docbook-xsl/css/html.css" todir="${tmp.dir}" />
		
		<copy todir="${tmp.dir}">
			<fileset basedir="${tools.dir}/fop-resources/">
				<include name="**/*" />
				<exclude name="*.properties" />
				<exclude name="*.txt" />
			</fileset>
		</copy>
		
	</target>

	<target name="docbook.check">
		<uptodate property="docbook.notRequired">
			<targetfiles>
				<include name="${tmp.dir}/${app.name}-current.doc.pdf" />
			</targetfiles>
			<sourcefiles>
				<include name="${doc.dir}/${docbook.name}.xml" />
			</sourcefiles>
		</uptodate>
	</target>

	<!-- ==================================================================== -->
	<!-- DocBook Documentation                                                -->
	<!-- ==================================================================== -->
	
	<target name="docbook" depends="prepareDocbook">
		<copy file="${tmp.dir}/${doc.html}" todir="${output.doc.dir}" />
		<delete dir="${tmp.dir}/tmp"/>
		<delete>
			<fileset basedir="${tmp.dir}">
				<include name="*.html" />
				<include name="log.txt" />
				<exclude name="${doc.html}" />
			</fileset>
		</delete>
		<echo message="${output.doc.dir}" />		
		<copy todir="${output.doc.dir}" overwrite="true">
			<fileset basedir="${tmp.dir}" >
				<include name="**/*"/>
				<exclude name="docbook/**"/>
				<exclude name="${doc.xml}" />
				<exclude name="userconfig.xml" />
				<exclude name="conf/**" />
			</fileset>
		</copy>
		<copy file="${tmp.dir}/${doc.pdf}" tofile="${output.doc.dir}/${doc.version.pdf}"/>
		<copy file="${tmp.dir}/${doc.html}" tofile="${output.doc.dir}/${doc.version.html}"/>
	</target>
   
	<target name="rebranding">
	
		<foreach item="File" property="filename">
			<in>
				<items basedir="${doc.dir}">
					<include name="*-doc.xml" />
					<exclude name="*-testcases-doc.xml" />
				</items>
			</in>
			<do>
				<echo message="${filename}" />
				<copy file="${filename}" tofile="${tmp.dir}/${docbook.name}.xml" >
					<filterchain>
				    	<replacestring from="../tools/docbook-dtd/dtd/docbook.dtd" to="../../tools/docbook-dtd/dtd/docbook.dtd" />
					</filterchain>
				</copy>
				
				<if test="${rebranding}">
					<then>
						<nant target="copyDoc" inheritAll="true" inheritRefs="true" >
							<buildfiles>
								<include name="**/default.build" />
								<!-- avoid recursive execution of current build file -->
								<exclude name="${project::get-buildfile-path()}" />
							</buildfiles>
						</nant>
						<touch file="${filename}" />
					</then>
				</if>
			</do>
		</foreach>
		
		
	</target>

	<target name="prepareDocbook" depends="content, rebranding, docbook.check" unless="${docbook.notRequired}">
	
		<!-- Create *.HTML -->
		<echo message="compile docbook with htmlhelp.xsl" />
		<call target="xml2HTMLHelp" />
		<echo message="generate HTML is ${file::exists(path::combine(tmp.dir, 'index.html'))}" />
		
		<echo message="compile docbook with chunk.xsl" />
		<call target="xml2chunkHTML" />
			
		<!-- Create *.CHM -->
		<echo message="make CHM file" />
		<echo message="loading '${tmp.dir}/toc.hhc'" />
		<loadfile file="${tmp.dir}/toc.hhc" property="new.toc.hhc" />
		
		<echo message="${string::replace(new.toc.hhc, '&lt;/HEAD&gt;', '&lt;TITLE&gt;@TITLE@&lt;/TITLE&gt;&lt;/HEAD&gt;')}" file="${tmp.dir}/toc.hhc" />
		
		<loadfile file="${tmp.dir}/toc.hhc" property="new.toc.hhc">
			<filterchain>
				<replacetokens>
					<token key="TITLE" value="${doc.title}" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo message="${new.toc.hhc}" file="${tmp.dir}/toc.hhc" />
		<echo message="added the title (${doc.title} ${version}-${release})" />
		<property name="new.toc.hhc" value="" overwrite="true" />
		
		<property name="htmlhelp" value="&quot;${path::get-full-path(tmp.dir)}\htmlhelp.hhp&quot;" />
			
		<property name="cmd" value="start /wait /min &quot;HTML HELP&quot; /D &quot;${hhc.dir}&quot; &quot;${hhc.exe}&quot; ${htmlhelp}" />
		<echo message="cmd=${cmd}" />
		<echo message="${cmd}" append="false" file="${tmp.dir}\chm.bat" /> 
		<exec program="${tmp.dir}\chm.bat" />
		
		<echo message="Finally CHM done" />

		<echo message="compile docbook with docbook.xsl" />
		<call target="xml2singleHTML" />
		<echo message="HTML size ${file::get-length(path::combine(tmp.dir, doc.html))} byte" if="${file::exists(path::combine(tmp.dir, doc.html))}" />
	
		<!-- Create *.PDF -->
		<echo message="docbook to FO" />
		<property name="doc.current.xml" value="${doc.xml}" />
		<property name="doc.current.fo" value="${doc.fo}" />
		<property name="doc.current.xsl" value="${xsl.fo}" />
		<call target="xml2FO" />

		<!--ADD-->
		<copy file="${tmp.dir}/${doc.fo}" tofile="${tmp.dir}/tmp/${doc.fo}" inputencoding="utf-8" outputencoding="utf-8">
			<filterchain>
				<replacestring from="@doctitle@" to="${doc.title}" />
				<replacestring from="@buildid@" to="Version: ${version}-${release} - ${build.timestamp}" />
				<replacestring from="@BUILDID@" to="${build.timestamp}" />
				<replacestring from="@COPYRIGHT@" to="${copyrightyear}" />
				<replacestring from="@VERSION@" to="${version}" />
				<replacestring from="@RELEASE@" to="${release}" />
				<replacestring from="@APPNAME@" to="${app.name}" />
				<replacestring from="@PROJECT@" to="${project.name}" />
				<replacestring from="@APPFULLNAME@" to="${app.full.name}" />
			</filterchain>
		</copy>
		<copy file="${tmp.dir}/tmp/${doc.fo}" tofile="${tmp.dir}/${doc.fo}" overwrite="true" inputencoding="utf-8" outputencoding="utf-8" />
		<!--/ADD-->
		
		<echo message="docbook to PDF ${tmp.dir}/${docbook.name}.xml" />
		<property name="doc.current.fo" value="${doc.fo}" />
		<property name="doc.current.pdf" value="${doc.pdf}" />
		<call target="fo2pdf" />
		
		<copy file="${tmp.dir}/${doc.pdf}" tofile="${tmp.dir}/${doc.pdf}" />
		
		<echo message="delete unused all file under ${tmp.dir}" />
		<delete dir="${tmp.dir}/tmp" />
		<delete failonerror="false">
			<fileset basedir="${tmp.dir}">
				<include name="*.bat" />
				<include name="*.cmd" />
				<include name="*.xml" />
				<include name="*.hhp" />
				<include name="*.hhc" />
				<include name="*.fo" />
				<exclude name="${doc.chm}" />
				<exclude name="${doc.html}" />
				<exclude name="log.txt" />
				<exclude name="userconfig.xml" />
			</fileset>
		</delete>		
	</target>

	<target name="buildDocBook">
		<echo message="Documentation Build Start" />
		<call target="clean" />
		<call target="docbook" />
		<echo message="Documentation Build Finish" />
	</target>
	
	<target name="buildTestCaseDoc" depends="init">
		<echo message="Test Case Documentation Build Start" />
		
		<foreach item="File" property="filename">
			<in>
				<items basedir="${doc.dir}">
					<include name="*-testcases-doc.xml" />
					<!--exclude name="*-doc.xml" /-->
				</items>
			</in>
			<do>
				<echo message="${filename}" />
				<copy file="${filename}" tofile="${tmp.dir}/${test.case.xml}" >
					<filterchain>
				    	<replacestring from="../tools/docbook-dtd/dtd/docbook.dtd" to="../../tools/docbook-dtd/dtd/docbook.dtd" />
					</filterchain>
				</copy>
				
				<if test="${rebranding}">
					<then>
						<nant target="copyDoc" inheritAll="true" inheritRefs="true" >
							<buildfiles>
								<include name="**/default.build" />
								<!-- avoid recursive execution of current build file -->
								<exclude name="${project::get-buildfile-path()}" />
							</buildfiles>
						</nant>
						<touch file="${filename}" />
					</then>
				</if>
			</do>
		</foreach>

		<!-- Create *.PDF -->
		<echo message="test case doc (XML) to FO" />
		<property name="doc.current.xml" value="${test.case.xml}" />
		<property name="doc.current.fo" value="${test.case.fo}" />
		<property name="doc.current.xsl" value="${xsl.fo}" />
		<call target="xml2FO" />
		
		<!--ADD-->
		<copy file="${tmp.dir}/${test.case.fo}" tofile="${tmp.dir}/tmp/${test.case.fo}" inputencoding="utf-8" outputencoding="utf-8">
			<filterchain>
				<replacestring from="@doctitle@" to="${doc.title}" />
				<replacestring from="@buildid@" to="Version: ${version}-${release} - ${build.timestamp}" />
				<replacestring from="@BUILDID@" to="${build.timestamp}" />
				<replacestring from="@COPYRIGHT@" to="${copyrightyear}" />
				<replacestring from="@VERSION@" to="${version}" />
				<replacestring from="@RELEASE@" to="${release}" />
				<replacestring from="@APPNAME@" to="${app.name}" />
				<replacestring from="@PROJECT@" to="${project.name}" />
				<replacestring from="@APPFULLNAME@" to="${app.full.name}" />
			</filterchain>
		</copy>
		<copy file="${tmp.dir}/tmp/${test.case.fo}" tofile="${tmp.dir}/${test.case.fo}" overwrite="true" inputencoding="utf-8" outputencoding="utf-8" />
		<!--/ADD-->
		
		<echo message="Test case doc (FO) to PDF ${tmp.dir}/${test.case.pdf}" />

		<property name="doc.current.fo" value="${test.case.fo}" />
		<property name="doc.current.pdf" value="${test.case.version.pdf}" />
		<call target="fo2pdf" />
		
		<echo message="Delete unused all file from ${tmp.dir}" />
		<delete dir="${tmp.dir}/tmp" />
		<delete failonerror="false">
			<fileset basedir="${tmp.dir}">
				<include name="*.bat" />
				<include name="*.cmd" />
				<include name="*.fo" />
				<exclude name="${doc.chm}" />
				<exclude name="${doc.html}" />
				<exclude name="testcase_log.txt" />
			</fileset>
		</delete>
		<echo message="${output.doc.dir}" />		
		<copy todir="${output.doc.dir}" overwrite="true">
			<fileset basedir="${tmp.dir}" >
				<include name="${test.case.version.pdf}"/>
			</fileset>
		</copy>
		<copy file="${tmp.dir}/${test.case.version.pdf}" tofile="${output.doc.dir}/${test.case.pdf}"/>
		<echo message="Test Case Documentation Build Finish" />
	</target>

	<target name="clean" depends="init">
		<delete dir="${output.doc.dir}" includeemptydirs="True" />
		<delete dir="${tmp.dir}" includeemptydirs="True"/>
		<delete file="log.txt" />
	</target>
		
	<target name="init.libraries">
		<property name="java.exe" value="java.exe" />
		<if test="${property::exists('jdk.dir')}">
			<property name="java.exe" value="${jdk.dir}\bin\java.exe" />
		</if>
		
		<if test="${(not property::exists('jdk.dir')) or (string::trim(property::get-value('jdk.dir')) == '')}">
			<property name="java.exe" value="${environment::get-variable('JAVA_HOME')}\bin\java.exe" />
		</if>
		<echo message="${java.exe}" />
		<!-- FOP classpath --> 
		<path id="fop-classpath">
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/commons-logging/commons-logging.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/commons-io/commons-io.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/fop/fop.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/xerces/xercesImpl.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/avalon-framework/avalon-framework.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/batik/batik.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/xmlgraphics-commons/xmlgraphics-commons.jar')}"/>
		</path>
		<property name="fop.main.class" value="org.apache.fop.cli.Main" />
		
		<!-- Xalan classpath --> 
		<path id="xalan-classpath">
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/xalan/xalan.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/xerces/xercesImpl.jar')}" />
			<pathelement file="${path::get-full-path(property::get-value('tools.dir') + '/xml-commons/xml-commons.jar')}"/>
		</path>
		<property name="xalan.main.class" value="org.apache.xalan.xslt.Process" />
	</target>
	
	<target name="check.init.lib">
		<if test="${not target::has-executed('init.libraries')}">
			<call target="init.libraries" />
		</if>
	</target>
	
	<target name="reset.type.parameters">
		<property name="fo2pdf.enable" value="false" />
		<property name="xml2FO.enable" value="false" />
		<property name="xml2singleHTML.enable" value="false" />
		<property name="xml2HTMLHelp.enable" value="false" />
		<property name="xml2chunkHTML.enable" value="false" />
	</target>
	
	<target name="common.java.executor">
		<!-- Transform to PDF -->

		<if test="${fo2pdf.enable}">
			<echo message="start /wait /min &quot;GEN PDF&quot; &quot;${java.exe}&quot; -cp "  append="false" file="${tmp.dir}/gendoc.cmd" />
			<foreach item="File" property="filename">
				<in>
					<items basedir="${tools.dir}">
						<include name="commons-logging/commons-logging.jar" />
						<include name="commons-io/commons-io.jar" />
						<include name="fop/fop.jar" />
						<include name="xerces/xercesImpl.jar" />
						<include name="avalon-framework/avalon-framework.jar" />
						<include name="batik/batik.jar" />
						<include name="xmlgraphics-commons/xmlgraphics-commons.jar" />
					</items>
				</in>
				<do>
					<echo message="&quot;${filename}&quot;;"  append="true" file="${tmp.dir}/gendoc.cmd" />
				</do>
			</foreach>
			<echo message=" ${java.main.class} -c &quot;conf/userconfig.xml&quot;"  append="true" file="${tmp.dir}/gendoc.cmd" />
			<echo message=" -fo &quot;${doc.current.fo}&quot;"  append="true" file="${tmp.dir}/gendoc.cmd" />
			<echo message=" -pdf &quot;${doc.current.pdf}&quot;"  append="true" file="${tmp.dir}/gendoc.cmd" />
			<exec program="${tmp.dir}/gendoc.cmd" workingdir="${tmp.dir}" output="log.txt" />
		
		</if>
		<!--exec program="${java.exe}" workingdir="${tmp.dir}" output="log.txt" if="${fo2pdf.enable}">
			<arg line="-cp" />
			<arg>
				<path refid="fop-classpath" />
			</arg>
			<arg value="${java.main.class}" />
			<arg line="-c conf/userconfig.xml" />
			<arg line="-fo ${doc.current.fo}" />
			<arg line="-pdf ${doc.current.pdf}" />
		</exec-->
		<!-- Transform to FO -->
		<exec program="${java.exe}" workingdir="${tmp.dir}" output="log.txt" if="${xml2FO.enable}">
			<arg line="-cp" />
			<arg>
				<path refid="xalan-classpath" />
			</arg>
			<arg value="${java.main.class}" />
			<arg line="-param body.start.indent 0pt" />
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param paper.type A4" />
			<arg line="-param section.autolabel 1" />
			<arg line="-param section.label.includes.component.label 1" />
			<arg line="-param section.autolabel.max.depth 8" />
			<arg line="-param ulink.footnotes 1" />
			<arg line="-out &quot;${doc.current.fo}&quot;" />
			<arg line="-in &quot;${doc.current.xml}&quot;" />
			<arg line="-xsl &quot;${doc.current.xsl}&quot;" />
		</exec>
		<!-- Transform to Single HTML -->
		<exec program="${java.exe}" workingdir="${tmp.dir}" output="log.txt" if="${xml2singleHTML.enable}">
			<arg line="-cp" />
			<arg>
				<path refid="xalan-classpath" />
			</arg>
			<arg value="org.apache.xalan.xslt.Process" />
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param ignore.image.scaling 1" />
			<arg line="-param htmlhelp.title &quot;${doc.title} ${version}-${release}&quot;" />
			<arg line="-param htmlhelp.chm &quot;${doc.chm}&quot;" />
			<arg line="-out &quot;${doc.current.html}&quot;" />
			<arg line="-in &quot;${doc.current.xml}&quot;" />
			<arg line="-xsl &quot;${doc.current.xsl}&quot;" />
		</exec>
		<!-- Transform to HELP HTML -->
		<exec program="${java.exe}" workingdir="${tmp.dir}" output="log.txt" if="${xml2HTMLHelp.enable or xml2chunkHTML.enable}">
			<arg line="-cp" />
			<arg>
				<path refid="xalan-classpath" />
			</arg>
			<arg value="${java.main.class}" />
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param ignore.image.scaling 1" />
			<arg line="-param htmlhelp.title &quot;${doc.title} ${version}-${release}&quot;" />
			<arg line="-param htmlhelp.chm &quot;${doc.chm}&quot;" />
			<arg line="-in &quot;${doc.current.xml}&quot;" />
			<arg line="-xsl &quot;${doc.current.xsl}&quot;" />
		</exec>
	</target>
	
	<target name="fo2pdf" depends="check.init.lib, reset.type.parameters">
		
		<!-- FOP control parameter -->
		<property name="java.main.class" value="${fop.main.class}" />
		<property name="fo2pdf.enable" value="true" />
		
		<call target="common.java.executor" />
	</target>
	
	<target name="xml2FO" depends="check.init.lib, reset.type.parameters">
		<!-- Xalan control parameter -->
		<property name="java.main.class" value="${xalan.main.class}" />
		<property name="xml2FO.enable" value="true" />
		
		<call target="common.java.executor" />
	</target>
	
	<target name="xml2singleHTML" depends="check.init.lib, reset.type.parameters">
		<!-- Xalan control parameter -->
		<property name="java.main.class" value="${xalan.main.class}" />
		<property name="xml2singleHTML.enable" value="true" />
		
		<!-- document parameters -->
		<property name="doc.current.xml" value="${doc.xml}" />
		<property name="doc.current.xsl" value="${xsl.html}" />
		<property name="doc.current.html" value="${doc.html}" />
		
		<call target="common.java.executor" />
	</target>
	
	<target name="xml2HTMLHelp" depends="check.init.lib, reset.type.parameters">
		<!-- Xalan control parameter -->
		<property name="java.main.class" value="${xalan.main.class}" />
		<property name="xml2HTMLHelp.enable" value="true" />
		
		<!-- document parameters -->
		<property name="doc.current.xml" value="${doc.xml}" />
		<property name="doc.current.xsl" value="${xsl.htmlhelp}" />
		
		<call target="common.java.executor" />
	</target>
	
	<target name="xml2chunkHTML" depends="check.init.lib, reset.type.parameters">
		<!-- Xalan control parameter -->
		<property name="java.main.class" value="${xalan.main.class}" />
		<property name="xml2chunkHTML.enable" value="true" />
		
		<!-- document parameters -->
		<property name="doc.current.xml" value="${doc.xml}" />
		<property name="doc.current.xsl" value="${xsl.chunk}" />
		
		<call target="common.java.executor" />
	</target>
	
</project>
