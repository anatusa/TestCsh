<!--
   Together Fuzzy Search. 
   Copyright (C) 2011 Together Teamsolutions Co., Ltd. 
 
   This program is free software: you can redistribute it and/or modify 
   it under the terms of the GNU General Public License as published by 
   the Free Software Foundation, either version 3 of the License, or 
   (at your option) any later version. 
 
   This program is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty of 
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
   GNU General Public License for more details. 
 
   You should have received a copy of the GNU General Public License 
   along with this program. If not, see http://www.gnu.org/licenses 
-->

<project name="Wait HTTP Task" basedir=".">
		<script language="C#" prefix="waitfor">
			<references>
              <include name="System.dll" />
			</references>
			<imports>
			  <import namespace="NAnt.Core.Util" />
              <import namespace="System.Threading" />
			</imports>
			<code>
				<![CDATA[
					/// <summary>
					/// This tasks waits until a condition is true
					/// </summary>
					[TaskName( "waitfor" )]
					public class WaitTask : Task
					{
						/// <summary>
						/// The timeout, in milliseconds
						/// </summary>
						private int _timeout;
						
						private string _timeoutproperty;
						
						/// <summary>
						/// Indicates the task should fail on a timeout
						/// </summary>
						private bool _failOnTimeout;
				 
						/// <summary>
						/// The expression url to wait for
						/// </summary>
						private string _url;
						
						/// <summary>
						/// The expression port to wait for
						/// </summary>
						private int _port;
						
						/// <summary>
						/// The interval, in milliseconds, to use for the timer
						/// </summary>
						private int _timerInterval = 50;
						
						/// <summary>
						/// Indicates we are in a timer callback
						/// </summary>
						private bool _inTimer;

						/// <summary>
						/// The timer instance
						/// </summary>
						private ManualResetEvent _waitEvent;

						/// <summary>
						/// The result of the wait task
						/// </summary>
						private bool _result;

						public WaitTask()
						{
							_waitEvent = new ManualResetEvent( false );
						}   //END constructor

						/// <summary>
						/// Gets/Sets the timeout in milliseconds
						/// </summary>
						[TaskAttribute( "timeout" )]
						public int Timeout
						{
							get
							{
								return _timeout;
							}
							set
							{
								_timeout = value;
							}
						}   //END Timeout property
						
						[TaskAttribute( "timeoutproperty", Required=false )]
						[StringValidator(AllowEmpty=false)]
						public string TimeoutProperty
						{
							get
							{
								return _timeoutproperty;
							}
							set
							{
								_timeoutproperty = StringUtils.ConvertEmptyToNull(value);
							}
						}
				 
						/// <summary>
						/// Indicates the task should fail on timeout
						/// </summary>
						[TaskAttribute( "failontimeout" )]
						public bool FailOnTimeout
						{
							get
							{
								return _failOnTimeout;
							}
							set
							{
								_failOnTimeout = value;
							}
						}   //END FailOnTimeout property

						/// <summary>
						/// Gets/Sets the URL expression
						/// </summary>
						[TaskAttribute( "url" )]
						public string ThisURL
						{
							get
							{
								return _url;
							}

							set
							{
								_url = value;
							}
						}   //END For property
						
						/// <summary>
						/// Gets/Sets the URL expression
						/// </summary>
						[TaskAttribute( "port" )]
						public int ThisPort
						{
							get
							{
								return _port;
							}

							set
							{
								_port = value;
							}
						}   //END For property
				 
						/// <summary>
						/// Gets/Sets the interval, in milliseconds, to evaluate the condition
						/// </summary>
						[TaskAttribute( "interval" )]
						public int Interval
						{
							get
							{
								return _timerInterval;
							}

							set
							{
								_timerInterval = value;
							}
						}   //END TimerInterval property
				 
						/// <summary>
						/// Executes the task
						/// </summary>
						protected override void ExecuteTask()
						{
							bool propertyExists = false;
							string originalPropertyValue = null;
								
							bool timedout = false;
							//setup the timer
							using( Timer t = new Timer( new TimerCallback( OnTimer ) , null , 0 , _timerInterval ) )
							{
								Log( Level.Info , "Waiting {0} milliseconds for condition to become true." , _timeout );
				 
								_waitEvent.Reset();

								timedout = ! _waitEvent.WaitOne( _timeout , false );
				 
							}   //dispose of the timer

							if( timedout )
							{
								//_timeoutproperty = timedout;
								
								
								
								Level logLevel = _failOnTimeout ? Level.Error : Level.Info;
								Log( logLevel , "The wait operation timed out." );
							}
							
							if (TimeoutProperty != null) {
									propertyExists = Project.Properties.Contains(TimeoutProperty);
									originalPropertyValue = Project.Properties[TimeoutProperty];
									Project.Properties[TimeoutProperty] = timedout ? "true" : "false";
									
									if (!propertyExists) {
										// if the property did not exist, then remove it again
										//Project.Properties.Remove(TimeoutProperty);
									} else {
										// restore original value
										Project.Properties[TimeoutProperty] = originalPropertyValue;
									}
							}

						}   //END ExecuteTask method
				 
						/// <summary>
						/// Indicates we are in a timer callback
						/// </summary>
						protected bool InTimer
						{
							get
							{
								lock( this )
									return _inTimer;
							}

							set
							{
								lock( this )
									_inTimer = value;
							}
						}   //END InTimer property
				 
						/// <summary>
						/// The result of the wait task
						/// </summary>
						protected bool Result
						{
							get
							{
								lock( this )
									return _result;
							}

							set
							{
								lock( this )
									_result = value;
							}
						}   //END Result property
				 
						/// <summary>
						/// Method called each timer interval
						/// </summary>
						/// <param name="state"></param>
						private void OnTimer( object state )
						{
							if( InTimer )
								return;

							try
							{
								InTimer = true;
								bool result = Evaluate();
								Log( Level.Info , "Evaluating condition: [{0} port {1}]" , _url, _port );
				 
								if( result )
								{
									Log( Level.Info , "Evaluation result is True" );
									Result = true;
									_waitEvent.Set();
								}
								else
								{
									Log( Level.Info , "Evaluation unsuccessful. Trying again in {0} milliseconds" , _timerInterval );
								}
							}
							finally
							{
								InTimer = false;
							}
						}   //END OnTimer method

						/// <summary>
						/// Determines if the wait condition is true
						/// </summary>
						private bool Evaluate()
						{
							try
							{
								System.Net.Sockets.TcpClient client = new System.Net.Sockets.TcpClient(_url, _port);
								client.Close();
								return true;
							}
							catch (System.Net.WebException)
							{
								return false;
							}
							catch (System.Exception)
							{
								return false;
							}

						}   //END Evaluate method
					}   //END WaitTask class

				]]>
			</code>
		</script>
</project>